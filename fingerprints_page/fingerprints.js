var fingerprintsContainer = document.getElementById("fingerprints-container");
var noFingerprints = document.getElementById("no-fingerprints");
var btnClearAll = document.getElementById("clearAll");

chrome.storage.local.get("fingerprints", function(result) {
  if (!result.hasOwnProperty("fingerprints")) {
    return;
  }

  var fp = result.fingerprints.sort(function(a, b) {
    return b.timestamp - a.timestamp;
  });

  if (fp.length === 0) {
    noFingerprints.style.display = "block";
    btnClearAll.className += " disabled";
  }

  groupBy(fp, "image").map(function(e) {
    var tmp = {};
    tmp.image = e.values[0].image;
    tmp.width = e.values[0].width;
    tmp.height = e.values[0].height;
    tmp.scripts = [];
    tmp.stacks = [];
    tmp.sender = [];
    tmp.timestamps = [];
    for (var i=0; i < e.values.length; i++) {
      if (e.values[i].hasOwnProperty("script") && tmp.scripts.indexOf(e.values[i].script) === -1) {
        tmp.scripts.push(e.values[i].script);
        tmp.stacks.push(e.values[i].stack);
      }
      if (e.values[i].hasOwnProperty("sender") && tmp.sender.indexOf(e.values[i].sender) === -1) {
        tmp.sender.push(e.values[i].sender);
      }
      if (e.values[i].hasOwnProperty("timestamp") && tmp.timestamps.indexOf(e.values[i].timestamp) === -1) {
        tmp.timestamps.push(e.values[i].timestamp);
      }
    }
    return tmp;
  }).forEach(function(e) {
    var card = document.createElement("div");
    const id = md5(e.image).toUpperCase().slice(-3);
    card.id = id;
    card.className = "card";
    card.style.padding = 20;
    card.style.marginBottom = "40px";

    var cardTitle = document.createElement("span");
    cardTitle.className = "card-title";
    cardTitle.innerHTML = "<b>FP:</b> #" + id;

    var cardImage = document.createElement("div");
    cardImage.style.textAlign = "center";
    var imageElement = document.createElement("img");
    imageElement.style.border = "1px solid Gainsboro"
    imageElement.style.marginTop = "40px";
    imageElement.src = e.image;
    imageElement.className = "responsive-img";
    imageElement.style.minWidth = 200;
    imageElement.style.minHeight = 100;
    var imageLink = document.createElement("a");
    imageLink.title = e.sender.join(", ");
    imageLink.style.cursor = "pointer";
    imageLink.addEventListener("click", function() {
      chrome.tabs.create({url: e.image});
    });
    var imageInfo = document.createElement("p");
    imageInfo.innerHTML = "<b>Original size: </b>" + e.width + " x " + e.height + " pixels";

    var cardContent = document.createElement("div");
    cardContent.className = "card-content";

    var collapsible = document.createElement("ul");
    collapsible.id = "collapsible";
    collapsible.className = "collapsible";

    collapsible.appendChild(renderCollapsible("Detected on these websites", true, "language", e.sender, e.sender));
    collapsible.appendChild(renderCollapsible("Generated by these scripts", false, "toc", e.scripts, e.stacks));
    cardContent.appendChild(collapsible);

    var cardAction = document.createElement("div");
    cardAction.className = "card-action";
    cardAction.style.textAlign = "right";
    var action = document.createElement("a");
    action.className = "btn waves-effect waves-light";
    action.alt = e.image;
    action.addEventListener("click", function(event) {
      var image = this.alt;
      var tmpArray = result.fingerprints.filter(function(elem) {
        if (image === elem.image) {
          return false;
        } else {
          return true;
        }
      });
      chrome.storage.local.set({fingerprints: tmpArray}, function() {
        result.fingerprints = tmpArray.sort(function(a, b) {
          return b.timestamp - a.timestamp;
        });
        var cardToDelete = document.getElementById(id);
        fingerprintsContainer.removeChild(cardToDelete);
        if (result.fingerprints.length === 0) {
          noFingerprints.style.display = "block";
          btnClearAll.className += " disabled";
        }
      });
    });
    action.innerHTML = "<i class='material-icons left'>delete</i>Delete";
    action.style.cursor = "pointer";
    action.style.paddingLeft = 10;
    action.style.paddingRight = 20;
    cardAction.appendChild(action);


    card.appendChild(cardTitle);
    imageLink.appendChild(imageElement);
    cardImage.appendChild(imageLink);
    cardImage.appendChild(imageInfo);
    card.appendChild(cardImage);
    card.appendChild(cardContent);
    card.appendChild(cardAction);
    fingerprintsContainer.appendChild(card);
  });

  var c = document.getElementsByClassName("collapsible");
  for (var i=0; i < c.length; i++) {
    new M.Collapsible(c[i], {});
  };
});

function renderCollapsible(label, active, iconName, source, titles) {
  var li = document.createElement("li");
  if (active) {
    li.className = "active";
  }
  var liHeader = document.createElement("div");
  liHeader.className = "collapsible-header";
  var icon = document.createElement("i");
  icon.className = "material-icons";
  icon.innerHTML = iconName;
  liHeader.appendChild(icon);
  liHeader.innerHTML += label;

  var liBody = document.createElement("div");
  liBody.className = "collapsible-body";
  var p = document.createElement("div");
  p.className = "collection";
  source.forEach(function(s) {
    var scriptLink = document.createElement("a");
    scriptLink.className = "collection-item";
    scriptLink.href = s;
    scriptLink.title = titles[source.indexOf(s)].replace("Error", "Generated: ").replace(/    /g, "\r\n- ");
    scriptLink.innerHTML = s.split("/").map((url) => (url.length > 30) ? url.slice(0, 10) + "..." + url.slice(url.length - 10) : url).join("/");
    scriptLink.target = "_blank";
    p.appendChild(scriptLink);
  });
  liBody.appendChild(p);
  li.appendChild(liHeader);
  li.appendChild(liBody);
  return li;
}

btnClearAll.addEventListener("click", function(e) {
  chrome.storage.local.set({fingerprints: []}, function() {
    var cards = fingerprintsContainer.getElementsByClassName("card");
    while (cards[0]) {
      fingerprintsContainer.removeChild(cards[0]);
    }
    noFingerprints.style.display = "block";
    btnClearAll.className += " disabled";
  });
});

// https://stackoverflow.com/a/34890276
function groupBy(xs, key) {
  return xs.reduce(function (rv, x) {
    let v = key instanceof Function ? key(x) : x[key];
    let el = rv.find((r) => r && r.key === v);
    if (el) {
      el.values.push(x);
    } else {
      rv.push({key: v, values: [x]});
    }
    return rv;
  }, []);
}
